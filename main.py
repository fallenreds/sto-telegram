import asyncio
import json

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from UpdateTask import order_updates, get_no_paid_orders

from api import *
from aiogram import Bot, Dispatcher, executor, filters

from buttons import *
from config import *
from engine import manager_notes_builder, id_spliter, ttn_info_builder, send_error_log, make_order
from States import NewTTN, NewPost, NewClientDiscount, NewPaymentData, NewProps, NewTextPost
from handlers.client_handler import show_clients
from labels import AdminLabels
from notifications import *

admin_list = [516842877, 5783466675]
storage = MemoryStorage()

bot = Bot(token=BOT_TOKEN, parse_mode="HTML", )
dp = Dispatcher(bot, storage=storage)


async def check_admin_permission(message):
    if message.chat.id not in admin_list:
        return False
    return True


@dp.message_handler(commands=['start'])
async def start_message(message):
    await add_new_visitor(int(message.chat.id))

    greetings_text = f"–í—ñ—Ç–∞—é, {message.chat.first_name}. \n–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –∫—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ üõí, –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å üì¶"
    markup_k = types.ReplyKeyboardMarkup(resize_keyboard=True)
    order_status_button = types.KeyboardButton("–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω—å üì¶")
    contact_info = types.KeyboardButton("–ó–≤‚Äò—è–∑–æ–∫ –∑ –Ω–∞–º–∏ üìû")
    discount_info = types.KeyboardButton("–ó–Ω–∏–∂–∫–∏ üíé")

    markup_k.add(order_status_button, contact_info, discount_info)
    if await check_admin_permission(message):
        admin_button = types.KeyboardButton("/admin")
        markup_k.add(admin_button)

    await bot.send_message(message.chat.id, text=greetings_text, reply_markup=markup_k)


@dp.message_handler(commands=['admin'])
async def admin_panel(message):
    if not await check_admin_permission(message):
        return await bot.send_message(message.chat.id, text=AdminLabels.notAdmin.value)
    markup_i = types.InlineKeyboardMarkup(row_width=1)

    markup_i.add(
        get_active_orders_button(),
        get_not_paid_along_time_button(),
        get_edit_discount_button(),
        get_all_clients_button(),
        get_make_post(),
        get_set_props(),
        get_props_info_button()
    )
    return await bot.send_message(message.chat.id, text=AdminLabels.enter_notifications.value, reply_markup=markup_i)


# async def make_order(bot, telegram_id, data, goods, order, client):
#     markup_i = types.InlineKeyboardMarkup(row_width=2)
#
#     text = f"<b>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> {order['id']}\n<b>–Ü–º'—è:</b> {order['name']}\n<b>–ü—Ä—ñ–∑–≤–∏—â–µ</b>: {order['last_name']}\n<b>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['nova_post_address']} \n"
#     if ttn := order['ttn']:
#         text += f"<b>–ù–æ–º–µ—Ä –¢–¢–ù</b>: {ttn}\n"
#         check_ttn_button = get_check_ttn_button(order['ttn'])
#         markup_i.add(check_ttn_button)
#
#     if order["prepayment"]:
#         text += f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É:</b> –ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞\n'
#         if order['is_paid'] == 1:
#             text += f'<b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏:</b> –û–ø–ª–∞—á–µ–Ω–æ\n\n'
#         else:
#             text += f'<b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏:</b> –ü–æ—Ç—Ä–µ–±—É—î –æ–ø–ª–∞—Ç–∏\n\n'
#     else:
#         text += f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É:</b> –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂\n\n'
#     to_pay = 0
#
#
#     for obj in data:
#         good = find_good(goods, obj['good_id'])
#         to_pay += good["price"][PRICE_ID_PROD] * obj['count']
#         text += f"<b>–¢–æ–≤–∞—Ä:</b> {good['title']} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {obj['count']}\n\n"
#
#     discount = await get_discount(client['id'])
#     if discount['success']:
#         to_pay -= to_pay / 100 * discount['data']['procent']
#
#     if not order['is_paid']:
#         text += f"<b>–î–æ —Å–ø–ª–∞—Ç–∏ {to_pay}üí≥</b>"
#
#     if order['prepayment'] == 1 and order['is_paid'] == 0:
#         delete_button = get_delete_order_button(order['id'])
#         markup_i.add(delete_button)
#
#     if order["prepayment"] and not order["is_paid"]:
#         props: dict
#         with open('props.json', "r", encoding='utf-8') as f:
#             props = json.load(f)
#         text += "\n\n–î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏üëá</b>" \
#                 "\n–ü—ñ—Å–ª—è —Å–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –∑ –æ–ø–ª–∞—Ç–æ—é</b>"
#         markup_i.add(get_props_info_button())
#         markup_i.add(get_send_payment_photo_button(order['id']))
#     await bot.send_message(telegram_id, text=text, reply_markup=markup_i)

    # –û–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—á–∞—è, –∂–¥–µ—Ç –ø–æ–∫–∞ –æ–Ω –Ω–µ —Å–¥–µ–ª–∞–µ—Ç –§–û–ü
    # if order["prepayment"] and not order["is_paid"]:
    #     await bot.send_invoice(chat_id=telegram_id,
    #                            title=f"–°–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order['id']}",
    #                            description=f'–®–∞–Ω–æ–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ —Å–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order["id"]}',
    #                            provider_token='632593626:TEST:sandbox_i93395288591',
    #                            currency="uah",
    #                            is_flexible=False,
    #                            prices=[types.LabeledPrice(label='–û–ø–ª–∞—Ç–∞ –ø–æ—Å–ª—É–≥ Airbag AutoDelivery',
    #                                                       amount=(int(to_pay * 100)))],
    #                            payload=order['id']
    #                            )


async def get_props_info():
    with open('props.json', "r", encoding='utf-8') as f:
        props = json.load(f)
    return f"<b>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏</b>\n" \
           f"\n<b>–§–Ü–û</b>: {props['full_name']}\n<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏</b>: <code>{props['card']}</code>\n"


def find_good(goods, good_id):
    for good in goods:
        if good["id"] == good_id:
            return good


async def pre_checkout_payment(pre_checkout_query):
    order = await get_order_by_id(int(pre_checkout_query.invoice_payload))
    print(order)
    order_goods_list = json.loads(order["goods_list"].replace("'", '"'))
    goods = await get_all_goods()
    goods = goods['data']

    if order:
        telegram_id = order['telegram_id']
        for order_good in order_goods_list:

            real_good = find_good(goods, order_good['good_id'])
            if int(real_good['residue']) < int(order_good['count']):
                error_message = f"\n–®–∞–Ω–æ–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç, –º–∏ –≤–∏–±–∞—á–∞—î–º–æ—Å—å –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ, –ø—Ä–æ—Ç–µ —Ç–æ–≤–∞—Ä—É {real_good['title']} " \
                                f"–∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. " \
                                f"\n\n–ô–æ–≥–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–∞–∑ {int(real_good['residue'])}" \
                                f"\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–≤–æ—Ä—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–æ–≤." \
                                f"–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è"
                await bot.send_message(telegram_id, text=error_message)
                await delete_order(order['id'])
                return await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False, error_message=error_message)
            return await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                                       error_message="–í—Å–µ –¥–æ–±—Ä–µ", )
    else:

        return await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                                   error_message="–ü–æ–º–∏–ª–∫–∞, –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query):
    try:
        await pre_checkout_payment(pre_checkout_query)
    except Exception as error:
        return await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                                   error_message="–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ")


@dp.message_handler(content_types=['successful_payment'])
async def got_payment(message: types.message.Message):
    await make_pay_order(int(message.successful_payment.invoice_payload))
    await bot.send_message(message.chat.id,
                           f"–î—è–∫—É—é, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{message.successful_payment.invoice_payload}!")


@dp.message_handler(filters.Text(contains="—Å—Ç–∞—Ç—É—Å", ignore_case=True))
async def check_status(message):
    try:
        if type(message) == type(types.Message()):
            telegram_id = int(message.chat.id)
            #chat_id = message.chat.id
        else:
            #chat_id = int(message["message"]['chat']['id'])
            telegram_id = int(message['from']['id'])

        client = await check_auth(telegram_id)

        if not client['success']:
            return await bot.send_message(telegram_id, f"–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –£–≤—ñ–π–¥—ñ—Ç—å –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —É –¥–æ–¥–∞—Ç–∫—É")

        orders = await get_orders_by_tg_id(telegram_id)
        active_orders = list(filter(lambda x: x["is_completed"] == False, orders))
        print(active_orders)

        if len(active_orders) == 0:
            return await bot.send_message(telegram_id, f"–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å")

        goods = await get_all_goods()
        await bot.send_message(telegram_id, f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {len(active_orders)}")

        for order in active_orders:
            data = json.loads(order["goods_list"].replace("'", '"'))
            await make_order(bot, telegram_id, data, goods["data"], order, client)
    except TypeError as error:
        await send_error_log(bot, 516842877, error)
        await no_connection_with_server_notification(bot, message)

@dp.message_handler(filters.Text(contains="–ó–≤‚Äò—è–∑–æ–∫", ignore_case=True))
async def show_info(message):
    markup_i = types.InlineKeyboardMarkup()
    write_to_button = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏", url='https://t.me/airbagsale')
    to_call_button = types.InlineKeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç–∏", callback_data="to_call")
    markup_i.add(write_to_button, to_call_button)
    if type(message) == type(types.Message()):
        await bot.send_contact(message.chat.id, phone_number="+380989989828", first_name='AIRBAG "DELIVERY AUTO"',
                               reply_markup=markup_i)
    else:
        await bot.send_contact(message["from"]["id"], phone_number="+380989989828", first_name='AIRBAG "DELIVERY AUTO"',
                               reply_markup=markup_i)


@dp.message_handler(filters.Text(contains="–∑–Ω–∏–∂–∫–∏", ignore_case=True))
async def check_discount(message: types.Message):
    try:
        telegram_id = message.chat.id
        reply_text = "–í –º–∞–≥–∞–∑–∏–Ω—ñ <b>Airbag ‚ÄúAutoDelivery‚Äù</b> –¥—ñ—é—Ç—å –Ω–∞–∫–æ–ø–∏—á—É–≤–∞–ª—å–Ω—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –≥—É—Ä—Ç–æ–≤–∏—Ö –ø–æ–∫—É–ø—Ü—ñ–≤.\n\n"
        discounts_info = await get_discounts_info()

        client = await get_client_by_tg_id(telegram_id)
        print(client)
        if client['success']:
            client_money_spend = await get_money_spend_cur_month(client['id'])
            client_discount = await get_discount(client['id'])
            print(client_discount)
            client_procent = 0
            if client_discount["success"]:
                client_procent = client_discount['data']["procent"]
                reply_text += f'–ù–∞—Ä–∞–∑—ñ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–Ω–∏–∂–∫–∞ <b>{client_procent}%</b>.\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å —É —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ <b>{client_money_spend} –≥—Ä–Ω</b>\n\n'

            else:
                reply_text += f'<b>–ù–∞–∂–∞–ª—å, –≤–∏ –ø–æ–∫–∏ –Ω–µ –º–∞—î—Ç–µ –∑–Ω–∏–∂–∫–∏</b>.\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å —É —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ <b>{client_money_spend} –≥—Ä–Ω</b>\n\n '

        reply_text += "–í –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—É–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –º–∏–Ω—É–ª–æ–º—É –º—ñ—Å—è—Ü—ñ, –Ω–∞–¥–∞—î—Ç—å—Å—è –∑–Ω–∏–∂–∫–∞ –Ω–∞ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –ø–æ—Ç–æ—á–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ:\n"

        for n in range(len(discounts_info)):
            if n != len(discounts_info) - 1:
                reply_text += f"‚ö™ –í—ñ–¥ <b>{discounts_info[n]['month_payment']}</b> –¥–æ <b>{discounts_info[n + 1]['month_payment']}</b> –≥—Ä–Ω  ‚Äî <b>{discounts_info[n]['procent']}%</b>\n"
            else:
                reply_text += f"‚ö™ –í—ñ–¥ <b>{discounts_info[n]['month_payment']}</b> –≥—Ä–Ω  ‚Äî <b>{discounts_info[n]['procent']}%</b>\n"

        reply_text += "\n<b>–ü–æ—Ä—è–¥–æ–∫ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:</b>"
        reply_text += "\n‚ö™ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–Ω–∏–∂–∫–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è <b>—â–æ–º—ñ—Å—è—Ü—è</b>;"
        reply_text += "\n‚ö™ –ó–Ω–∏–∂–∫–∞ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂—É—î—Ç—å—Å—è <b>–Ω–∞ –≤–µ—Å—å —Ç–æ–≤–∞—Ä</b> —É –∫–∞—Ç–∞–ª–æ–∑—ñ;"

        reply_text += "\n\n<b>–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, —â–æ –Ω–∞–∫–æ–ø–∏—á—É–≤–∞–ª—å–Ω–∞ –∑–Ω–∏–∂–∫–∞ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞—à—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—é —â–µ –±—ñ–ª—å—à —É—Å–ø—ñ—à–Ω–æ—é.</b>"
        await bot.send_message(telegram_id, reply_text)
    except TypeError as error:
        await send_error_log(bot, 516842877, error)
        await no_connection_with_server_notification(bot, message)


async def is_discount(text):
    month_payment, procent = text.split("@")
    try:
        int(month_payment)
        int(procent)
        if int(procent) <= 100:
            return True
        raise ValueError
    except ValueError:
        return False


@dp.message_handler(filters.Text(contains="@", ignore_case=True))
async def add_new_discount(message: types.Message):
    telegram_id = message.chat.id
    if await check_admin_permission(message) and await is_discount(message.text):
        month_payment, procent = message.text.split("@")
        response = await post_discount(int(procent), int(month_payment))
        if not response:
            return None
        if response['success']:
            await bot.send_message(telegram_id, "–ù–æ–≤–∞ –∑–Ω–∏–∂–∫–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!")
        else:
            await unknown_error_notifications(bot, telegram_id)


    elif check_admin_permission(message):
        await bot.send_message(telegram_id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")


async def order_list_builder(bot, orders, admin_id, goods):
    for order in orders:
        notes_info = await manager_notes_builder(order, goods)  # {"text":goods_info, "client": base_client}

        markup_i = types.InlineKeyboardMarkup()
        deactivate_button = get_deactive_order_button(order['id'])
        delete_button = get_delete_order_button(order['id'])

        if not order["ttn"]:
            add_ttn_button = types.InlineKeyboardButton(f"–î–æ–¥–∞—Ç–∏ ttn", callback_data=f"add_ttn/{order['id']}")
            markup_i.add(add_ttn_button)
        else:
            add_ttn_button = types.InlineKeyboardButton(f"–û–Ω–æ–≤–∏—Ç–∏ ttn", callback_data=f"add_ttn/{order['id']}")
            check_ttn_button = get_check_ttn_button(order['ttn'])
            markup_i.add(add_ttn_button, check_ttn_button)
        if order['prepayment']:
            if order['is_paid'] == 0:
                to_not_prepayment_button = get_to_not_prepayment_button(order['id'])
                markup_i.add(to_not_prepayment_button)
                markup_i.add(get_make_paid_button(order['id']))

        markup_i.add(deactivate_button, delete_button)
        await bot.send_message(admin_id, text=notes_info["text"], reply_markup=markup_i)


async def edit_discount(telegram_id):
    discounts_info = await get_discounts_info()
    for discount in discounts_info:
        markup_i = types.InlineKeyboardMarkup()
        delete_discount = types.InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∑–Ω–∏–∂–∫—É ‚ùå",
                                                     callback_data=f"delete_discount/{discount['id']}")
        markup_i.add(delete_discount)
        await bot.send_message(telegram_id, f"<b>{discount['month_payment']} –≥—Ä–Ω</b> ‚Äî <b>{discount['procent']}%</b>",
                               reply_markup=markup_i)

    markup_i = types.InlineKeyboardMarkup()
    add_discount = types.InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –∑–Ω–∏–∂–∫—É ‚ûï", callback_data=f"new_discount")
    markup_i.add(add_discount)
    await bot.send_message(telegram_id,
                           f"<b>–ê–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É –∑–Ω–∏–∂–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—á–µ–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤ –∑–∞ –º—ñ—Å—è—Ü—å-–ø—Ä–æ—Ü–µ–Ω—Ç.\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 1000@2</b>",
                           reply_markup=markup_i)


@dp.callback_query_handler()
async def callback_admin_panel(callback: types.CallbackQuery):
    try:


        goods = await get_all_goods()

        admin_id = callback.from_user.id
        if callback.data == "active_order":
            active_orders = await get_active_orders()
            if not active_orders:
                return await bot.send_message(admin_id, text="–ù–∞ –¥–∞–Ω–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å")
            await order_list_builder(bot, active_orders, admin_id, goods)

        if callback.data == "show_all_clients":
            await show_clients(callback.message, bot)

        if "check_order/" in callback.data:
            order_id = await id_spliter(callback.data)
            order = [await get_order_by_id(order_id)]
            print(order)
            await order_list_builder(bot, order, callback.message.chat.id, goods)

        if callback.data == "discount_info":
            await check_discount(callback.message)

        if "make_paid/" in callback.data:
            order_id = await id_spliter(callback.data)
            order = await get_order_by_id(order_id)
            admin_text = f"–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ remonline ‚Ññ{order_id}!"
            client_text = f"–î—è–∫—É—é, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id}!"
            await make_pay_order(int(order_id))
            await bot.send_message(order['telegram_id'], client_text)
            await bot.send_message(callback.message.chat.id, admin_text)

        if callback.data == "change_props" and callback.message.chat.id in admin_list:
            await NewProps.full_name.set()
            await bot.send_message(callback.message.chat.id,
                                   "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –§–Ü–û –≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞—Ö.\n–î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /stop")

        if "deactivate_order/" in callback.data:
            order_id = await id_spliter(callback.data)
            order = await get_order_by_id(order_id)

            response = await finish_order(order_id)
            if not response:
                return None
            if response['success']:
                client_text = f"–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è <b>‚Ññ{order['id']}</b>!\n–î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π —É AirBag ‚ÄúAutoDelivery‚Äù üíõüíô"
                await bot.send_message(admin_id,
                                       text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ remonline!")
                await bot.send_message(order['telegram_id'], client_text)
            else:
                await unknown_error_notifications(bot, admin_id)

        if "to_not_prepayment/" in callback.data:
            order_id = await id_spliter(callback.data)
            order = await get_order_by_id(order_id)
            await change_to_not_prepayment(order_id)
            await change_to_not_prepayment_notifications(bot, order_id, callback.message.chat.id)
            await change_to_not_prepayment_notifications(bot, order_id, order['telegram_id'])
        if "check_ttn/" in callback.data:
            ttn = await id_spliter(callback.data)
            order = await get_order_by_ttn(ttn)

            response = await ttn_tracking(ttn, order['phone'])
            tnn_info_text = await ttn_info_builder(response, order)
            await bot.send_message(callback.message.chat.id, text=tnn_info_text)

        # if "change_order_prepayment/" in callback.data:
        #     order_id = callback.data.rsplit('/')[-1]

        if "send_payment_photo" in callback.data:
            order_id = callback.data.rsplit('/')[-1]
            await NewPaymentData.order_id.set()
            await bot.send_message(callback.message.chat.id,
                                   f'–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∑–∞ —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç–∏. –ù–æ–º–µ—Ä —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}.\n–î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /stop')

        if callback.data == "to_call":
            await bot.send_message(callback.message.chat.id, text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: \n+380989989828")

        if "delete_order/" in callback.data:
            order_id = await id_spliter(callback.data)
            order = await get_order_by_id(order_id)
            response = await delete_order(order_id)
            markup_i = types.InlineKeyboardMarkup().add(get_our_contact_button())
            if not response:
                return None
            if response['success']:
                client_text = f"<b>–ù–∞ –∂–∞–ª—å, –º–∏ –Ω–µ –¥–æ—á–µ–∫–∞–ª–∏—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –í–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} üòü</b>" \
                              f"\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ, —á–µ–∫–∞—î–º–æ –Ω–∞ –í–∞—à–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è! üòÄ"
                if callback.message.chat.id in admin_list:
                    await bot.send_message(admin_id, text=f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –Ø–∫—â–æ —Ç–∏–ø –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ –∑ remonline!")
                await bot.send_message(order['telegram_id'], client_text, reply_markup=markup_i)
            else:
                await unknown_error_notifications(bot, admin_id)

        if callback.data == "no_paid":
            orders = await no_paid_along_time()
            if not orders['success']:
                return await bot.send_message(admin_id, text="–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–µ—Å–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å, –∑ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç–æ—é")
            await order_list_builder(bot, orders['data'], admin_id, goods)

        if callback.data == "–ó–≤‚Äò—è–∑–æ–∫":
            await show_info(callback)

        if "add_ttn/" in callback.data:
            order_id = await id_spliter(callback.data)
            ttn_message = await bot.send_message(callback.message.chat.id,
                                                 f"–î–æ–±—Ä–µ, —É–≤–µ–¥—ñ—Ç—å –∑–∞—Ä–∞–∑ id –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n<b>Id —Ü—å–æ–≥–æ "
                                                 f"–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}.</b>")

            await NewTTN.order_id.set()

        if callback.data == "–°—Ç–∞—Ç—É—Å":
            await check_status(callback)
        if callback.data == "get_props_info":
            await bot.send_message(callback.message.chat.id, await get_props_info())

        if callback.data == "edit_discount":
            await edit_discount(callback.message.chat.id)

        if "delete_discount/" in callback.data:
            discount_id = await id_spliter(callback.data)
            response = await delete_discount(discount_id)
            if not response:
                return None
            if response['success']:
                await bot.send_message(callback.message.chat.id, text="–ó–Ω–∏–∂–∫—É –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
            else:
                await unknown_error_notifications(bot, callback.message.chat.id)

        if callback.data == "new_discount":
            await bot.send_message(callback.message.chat.id, text="–û—á—ñ–∫—É—é –Ω–æ–≤—ñ –¥–∞–Ω—ñ")

        if callback.data == "make_post" and callback.message.chat.id in admin_list:
            markup_i = types.InlineKeyboardMarkup().add(get_make_post_only_text_button(),
                                                        get_make_post_text_with_image_button())
            await bot.send_message(callback.message.chat.id,
                                   text="–û–±–µ—Ä—ñ—Ç—å: –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—î—é —á–∏ –±–µ–∑?\n–î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /stop",
                                   reply_markup=markup_i)

        if callback.data == "make_post_with_image":
            await bot.send_message(callback.message.chat.id, text="–î–æ–±—Ä–µ, —á–µ–∫–∞—é –≤—ñ–¥ –≤–∞—Å —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
            await NewPost.text.set()

        if callback.data == "make_post_no_image":
            await bot.send_message(callback.message.chat.id, text="–î–æ–±—Ä–µ, —á–µ–∫–∞—é –≤—ñ–¥ –≤–∞—Å —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
            await NewTextPost.text.set()

        if callback.data == "show_client_info":
            message = callback.message
            await show_clients(message, bot)

        if "add_client_monthpayment/" in callback.data:
            client_id = await id_spliter(callback.data)
            await bot.send_message(callback.message.chat.id,
                                   f"–î–æ–±—Ä–µ, –ø—Ä–∏—à–ª—ñ—Ç—å –º–µ–Ω—ñ ID –∫–ª—ñ—î–Ω—Ç–∞. ID —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {client_id}")
            await NewClientDiscount.client_id.set()

    except TypeError as error:
        await no_connection_with_server_notification(bot, callback.message)
    except Exception as error:
        await send_error_log(bot, 516842877, error)


@dp.message_handler(commands=['stop'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é.')

@dp.message_handler(content_types=['text'], state=NewProps.full_name)
async def new_props_fullname_state(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['full_name'] = message.text
        await bot.send_message(message.chat.id, "–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏")
        await NewProps.next()
    except Exception as error:
        await bot.send_message(message.chat.id, "–ù–∞–∂–∞–ª—å, —á–æ–º—É—Å—å —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞.")


@dp.message_handler(content_types=['text'], state=NewProps.card)
async def new_props_card_state(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['card'] = message.text

        data = await state.get_data()
        with open('props.json', 'w') as file:
            file.write(json.dumps(data, indent=4))

        await bot.send_message(message.chat.id, "–í–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ")


    except Exception as error:
        await bot.send_message(message.chat.id, "–ù–∞–∂–∞–ª—å, —á–æ–º—É—Å—å —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞.")
    finally:
        await state.finish()


@dp.message_handler(content_types=['text'], state=NewPaymentData.order_id)
async def new_payment_order_id_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['order_id'] = message.text
    await bot.send_message(message.chat.id, "–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∑ –æ–ø–ª–∞—Ç–æ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    await NewPaymentData.next()


@dp.message_handler(content_types=["photo"], state=NewPaymentData.photo)
async def new_payment_photo_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.photo[0]:
            data['photo'] = message.photo[0].file_id

    data = await state.get_data()

    markup_i = types.InlineKeyboardMarkup()
    markup_i.add(get_order_info_button(data['order_id']))
    admin_text = f"–®–∞–Ω–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä, —Å—Ç–≤–æ—Ä–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{data['order_id']}, –ø–æ–∫–∞–∑–∞—Ç–∏ –π–æ–≥–æ?"
    for admin in admin_list:
        await bot.send_photo(admin, photo=data['photo'], caption=admin_text, reply_markup=markup_i)
    await bot.send_message(message.chat.id, "–î—è–∫—É—é. –û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    await state.finish()


@dp.message_handler(content_types=['text'], state=NewClientDiscount.client_id)
async def new_client_discount_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['client_id'] = message.text

    await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä —É–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å")
    await NewClientDiscount.next()


@dp.message_handler(content_types=['text'], state=NewClientDiscount.count)
async def new_client_discount_state(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['count'] = message.text
        data = await state.get_data()
        response = await add_bonus_client_discount(client_id=data['client_id'], count=data['count'])
        if not response:
            return None
        if response["success"]:
            await bot.send_message(message.chat.id, f"–ö–ª—ñ—î–Ω—Ç—É ‚Ññ{data['client_id']} –±—É–ª–æ –Ω–∞–¥–∞–Ω–æ {data['count']} –±–æ–Ω—É—Å—ñ–≤")
            await client_added_bonus_notifications(bot, data['client_id'])
        else:
            await bot.send_message(message.chat.id, response['error'])
    except Exception as error:
        await send_error_log(bot, 516842877, error)
    finally:
        await state.finish()



@dp.message_handler(content_types=['text'], state=NewTextPost.text)
async def new_no_phono_post(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text

    data = await state.get_data()
    await bot.send_message(message.chat.id, text="–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç—É")
    visitors = await get_visitors()
    if visitors:
        for visitor in visitors:
            try:
                await bot.send_message(visitor['telegram_id'], data['text'])
            except Exception as error:
                await send_error_log(bot, 516842877, error)
    await state.finish()

@dp.message_handler(content_types=['text'], state=NewPost.text)
async def new_post_text_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
    await NewPost.next()


@dp.message_handler(content_types=["photo"], state=NewPost.photo)
async def new_post_photo_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    data = await state.get_data()
    await bot.send_message(message.chat.id, text="–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç—É")
    visitors = await get_visitors()
    if visitors:
        for visitor in visitors:
            try:
                await bot.send_photo(chat_id=visitor['telegram_id'], photo=data['photo'], caption=data['text'])
            except Exception as error:
                await send_error_log(bot, 516842877, error)
    await state.finish()




@dp.message_handler(content_types=['text'], state=NewTTN.order_id)
async def order_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['order_id'] = message.text

    await message.reply(
        "<b>–î—É–∂–µ –¥–æ–±—Ä–µ, –∑–∞—Ä–∞–∑ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä TTN. </b>\n\n–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¢TN –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    await NewTTN.next()


@dp.message_handler(content_types=['text'], state=NewTTN.ttn_state)
async def ttn_state(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['ttn_state'] = message.text

        data = await state.get_data()
        await state.finish()
        response = await update_ttn(data['order_id'], data['ttn_state'])
        if not response:
            return None
        if response['success']:
            order = await get_order_by_id(data['order_id'])
            await ttn_update_notification(bot, order)
            return await message.reply("–ß—É–¥–æ–≤–æ, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ TTN –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

        else:
            return await unknown_error_notifications(bot, message.chat.id)
    except Exception as error:
        await send_error_log(bot, 516842877, error)


async def update(_):
    asyncio.create_task(get_no_paid_orders(bot, admin_list))
    asyncio.create_task(order_updates(bot, admin_list))


executor.start_polling(dp, skip_updates=True, on_startup=update)
