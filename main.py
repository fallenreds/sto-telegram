import asyncio
import json

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from api import get_all_goods, get_orders_by_tg_id, check_auth, get_active_orders, get_discount, finish_order, \
    no_paid_along_time, get_client_by_tg_id, delete_order, get_discounts_info, post_discount, delete_discount, \
    update_ttn, ttn_tracking, get_order_by_ttn, get_order_by_id, add_new_visitor
from aiogram import Bot, Dispatcher, executor, types, filters
from config import *
from engine import manager_notes_builder, id_spliter, ttn_info_builder
from States import NewTTN

admin_list = [575926846, 516842877]
storage = MemoryStorage()

bot = Bot(token=BOT_TOKEN, parse_mode="HTML", )
dp = Dispatcher(bot, storage=storage)


async def check_admin_permission(message):
    if message.chat.id not in admin_list:
        return False
    return True


@dp.message_handler(commands=['start'])
async def start_message(message):
    await add_new_visitor(int(message.chat.id))
    asyncio.create_task(get_no_paid_orders())

    greetings_text = f"–í—ñ—Ç–∞—é, {message.chat.first_name}. \n–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –∫—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ üõí, –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å üì¶"
    markup_k = types.ReplyKeyboardMarkup(resize_keyboard=True)
    order_status_button = types.KeyboardButton("–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω—å üì¶")
    contact_info = types.KeyboardButton("–ó–≤‚Äò—è–∑–æ–∫ –∑ –Ω–∞–º–∏ üìû")
    discount_info = types.KeyboardButton("–ó–Ω–∏–∂–∫–∏ üíé")

    markup_k.add(order_status_button, contact_info, discount_info)
    if await check_admin_permission(message):
        admin_button = types.KeyboardButton("/admin")
        markup_k.add(admin_button)

    await bot.send_message(message.chat.id, text=greetings_text, reply_markup=markup_k)


@dp.message_handler(commands=['admin'])
async def admin_panel(message):
    if not await check_admin_permission(message):
        return await bot.send_message(message.chat.id, text="–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    markup_i = types.InlineKeyboardMarkup(row_width=1)
    active_orders = types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìÉ", callback_data="active_order")
    not_paid_along_time_client = types.InlineKeyboardButton("–î–æ–≤–≥–æ –Ω–µ —Å–ø–ª–∞—á—É–≤–∞–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìÜ", callback_data="no_paid")
    discount_edit_button = types.InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–Ω–∏–∂–∫–∏ ‚öô", callback_data="edit_discount")
    markup_i.add(active_orders, not_paid_along_time_client, discount_edit_button)
    return await bot.send_message(message.chat.id,
                                  text="–®–∞–Ω–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∏ –∑–∞–π—à–ª–∏ –¥–æ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è, <b>–±—É–¥—å—Ç–µ –æ–±–∞—á–Ω—ñ –ø–µ—Ä—à –Ω—ñ–∂ –æ–±–∏—Ä–∞—Ç–∏</b>",
                                  reply_markup=markup_i)


async def make_order(telegram_id, chat_id, data, goods, order, client):
    markup_i = types.InlineKeyboardMarkup(row_width=2)

    text = f"<b>–Ü–º'—è:</b> {order['name']}\n<b>–ü—Ä—ñ–∑–≤–∏—â–µ</b>: {order['last_name']}\n<b>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['nova_post_address']} \n"
    if ttn := order['ttn']:
        text += f"<b>–ù–æ–º–µ—Ä –¢–¢–ù</b>: {ttn}\n"
        check_ttn_button = types.InlineKeyboardButton(f"–í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ ttn", callback_data=f'check_ttn/{order["ttn"]}')
        markup_i.add(check_ttn_button)

    if order["prepayment"]:
        text += f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É:</b> –ü–æ—Ç—Ä–µ–±—É—î –æ–ø–ª–∞—Ç–∏\n\n'
    else:
        text += f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É:</b> –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂\n\n'
    to_pay = 0

    for obj in data:
        good = find_good(goods, obj['good_id'])
        to_pay += good["price"][PRICE_ID_PROD] * obj['count']
        text += f"<b>–¢–æ–≤–∞—Ä:</b> {good['title']} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {obj['count']}\n\n"

    discount = await get_discount(client['id'])
    if discount['success']:
        to_pay -= to_pay / 100 * discount['data']['procent']

    text += f"<b>–î–æ —Å–ø–ª–∞—Ç–∏ {to_pay}üí≥</b>"

    if order['prepayment'] == 1 and order['is_paid'] == 0:
        delete_button = types.InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"delete_order/{order['id']}")
        markup_i.add(delete_button)

    await bot.send_message(telegram_id, text=text, reply_markup=markup_i)

    if order["prepayment"] and not order["is_paid"]:
        await bot.send_invoice(chat_id=telegram_id,
                               title="–°–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                               description='–®–∞–Ω–æ–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ —Å–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ',
                               provider_token='632593626:TEST:sandbox_i93395288591',
                               currency="uah",
                               is_flexible=False,
                               prices=[types.LabeledPrice(label='–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ STOSHOP', amount=(int(to_pay * 100)))],
                               payload="test"
                               )


def find_good(goods, good_id):
    for good in goods:
        if good["id"] == good_id:
            return good


@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message):
    await bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ!")


@dp.message_handler(filters.Text(contains="—Å—Ç–∞—Ç—É—Å", ignore_case=True))
async def check_status(message):
    print(message)
    if type(message) == type(types.Message()):
        telegram_id = int(message.chat.id)
        chat_id = message.chat.id
    else:
        chat_id = int(message["message"]['chat']['id'])
        telegram_id = int(message['from']['id'])

    client = await check_auth(telegram_id)

    if not client['success']:
        return await bot.send_message(telegram_id, f"–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –£–≤—ñ–π–¥—ñ—Ç—å –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —É –¥–æ–¥–∞—Ç–∫—É")

    orders = await get_orders_by_tg_id(telegram_id)
    active_orders = list(filter(lambda x: x["is_completed"] == False, orders))
    print(active_orders)

    if len(active_orders) == 0:
        return await bot.send_message(telegram_id, f"–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å")

    goods = await get_all_goods()
    await bot.send_message(telegram_id, f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {len(active_orders)}")

    for order in active_orders:
        data = json.loads(order["goods_list"].replace("'", '"'))
        await make_order(telegram_id, chat_id, data, goods["data"], order, client)


@dp.message_handler(filters.Text(contains="–ó–≤‚Äò—è–∑–æ–∫", ignore_case=True))
async def show_info(message):
    markup_i = types.InlineKeyboardMarkup()
    write_to_button = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É", url='t.me/fallenreds')
    markup_i.add(write_to_button)
    if type(message) == type(types.Message()):
        return await message.reply(f"<b>–ü–Ü–ë:</b> –î–º–∏—Ç—Ä–æ\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +380 99 025 91 52", reply_markup=markup_i)
    else:
        return await bot.send_message(message["from"]["id"], f"<b>–ü–Ü–ë:</b> –î–º–∏—Ç—Ä–æ\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +380 99 025 91 52",
                                      reply_markup=markup_i)


@dp.message_handler(filters.Text(contains="–∑–Ω–∏–∂–∫–∏", ignore_case=True))
async def check_discount(message: types.Message):
    telegram_id = message.chat.id
    reply_text = ""
    discounts_info = await get_discounts_info()

    client = await get_client_by_tg_id(telegram_id)
    if client['success']:
        client_discount = await get_discount(client['id'])
        client_procent = 0
        print(client_discount)
        if client_discount["success"]:
            client_procent = client_discount['data']["procent"]
            reply_text = f'–î–æ—Å—Ç—É–ø–Ω–∞ –≤–∞–º –∑–Ω–∏–∂–∫–∞ —Å–∫–ª–∞–¥–∞—î <b>{client_procent}%</b>.\n–í–∞—à–∞ –º—ñ—Å—è—á–Ω–∞ —Å—É–º–∞ —Å–ø–ª–∞—á–µ–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å <b>{client_discount["money_spent"]} –≥—Ä–Ω</b>'
        if client_discount["data"] == "No discount":
            reply_text = f'<b>–ù–∞–∂–∞–ª—å, –≤–∏ –ø–æ–∫–∏ –Ω–µ –º–∞—î—Ç–µ –∑–Ω–∏–∂–∫–∏</b>.\n–í–∞—à–∞ –º—ñ—Å—è—á–Ω–∞ —Å—É–º–∞ —Å–ø–ª–∞—á–µ–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å <b>{client_discount["money_spent"]} –≥—Ä–Ω</b>'

    reply_text += "\n–ó–∞—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–∫—ñ –∑–Ω–∏–∂–∫–∏:\n\n"
    for discount in discounts_info:
        reply_text += f"–°—É–º–∞ —Å–ø–ª–∞—á–µ–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É: <b>{discount['month_payment']} –≥—Ä–Ω</b> ‚Äî <b>{discount['procent']}%</b>\n"

    await bot.send_message(telegram_id, reply_text)


async def is_discount(text):
    month_payment, procent = text.split("@")
    try:
        int(month_payment)
        int(procent)
        if int(procent) <= 100:
            return True
        raise ValueError
    except ValueError:
        return False


@dp.message_handler(filters.Text(contains="@", ignore_case=True))
async def add_new_discount(message: types.Message):
    telegram_id = message.chat.id
    if await check_admin_permission(message) and await is_discount(message.text):
        month_payment, procent = message.text.split("@")
        response = await post_discount(int(procent), int(month_payment))
        if response['success']:
            await bot.send_message(telegram_id, "–ù–æ–≤–∞ –∑–Ω–∏–∂–∫–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!")
        else:
            await bot.send_message(telegram_id, "–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!")


    elif check_admin_permission(message):
        await bot.send_message(telegram_id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")


async def order_list_builder(bot, orders, admin_id, goods):
    for order in orders:
        notes_info = await manager_notes_builder(order, goods)  # {"text":goods_info, "client": base_client}
        client = notes_info["client"]
        markup_i = types.InlineKeyboardMarkup()
        deactivate_button = types.InlineKeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                                       callback_data=f"deactivate_order/{order['id']}")
        delete_button = types.InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                                   callback_data=f"delete_order/{order['id']}")

        if not order["ttn"]:
            add_ttn_button = types.InlineKeyboardButton(f"–î–æ–¥–∞—Ç–∏ ttn", callback_data=f"add_ttn/{order['id']}")
            markup_i.add(add_ttn_button)
        else:
            add_ttn_button = types.InlineKeyboardButton(f"–û–Ω–æ–≤–∏—Ç–∏ ttn", callback_data=f"add_ttn/{order['id']}")
            check_ttn_button = types.InlineKeyboardButton(f"–í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ ttn", callback_data=f'check_ttn/{order["ttn"]}')
            markup_i.add(add_ttn_button, check_ttn_button)

        markup_i.add(deactivate_button, delete_button)
        await bot.send_message(admin_id, text=notes_info["text"], reply_markup=markup_i)


async def edit_discount(telegram_id):
    discounts_info = await get_discounts_info()
    for discount in discounts_info:
        markup_i = types.InlineKeyboardMarkup()
        delete_discount = types.InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∑–Ω–∏–∂–∫—É ‚ùå",
                                                     callback_data=f"delete_discount/{discount['id']}")
        markup_i.add(delete_discount)
        await bot.send_message(telegram_id, f"<b>{discount['month_payment']} –≥—Ä–Ω</b> ‚Äî <b>{discount['procent']}%</b>",
                               reply_markup=markup_i)

    markup_i = types.InlineKeyboardMarkup()
    add_discount = types.InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –∑–Ω–∏–∂–∫—É ‚ûï", callback_data=f"new_discount")
    markup_i.add(add_discount)
    await bot.send_message(telegram_id,
                           f"<b>–ê–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É –∑–Ω–∏–∂–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—á–µ–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤ –∑–∞ –º—ñ—Å—è—Ü—å-–ø—Ä–æ—Ü–µ–Ω—Ç.\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 1000@2</b>",
                           reply_markup=markup_i)


@dp.callback_query_handler()
async def callback_admin_panel(callback: types.CallbackQuery):
    goods = await get_all_goods()

    admin_id = callback.from_user.id
    if callback.data == "active_order":
        active_orders = await get_active_orders()
        if not active_orders:
            return await bot.send_message(admin_id, text="–ù–∞ –¥–∞–Ω–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å")
        await order_list_builder(bot, active_orders, admin_id, goods)

    if "deactivate_order/" in callback.data:
        order_id = await id_spliter(callback.data)
        order = await get_order_by_id(order_id)

        response = await finish_order(order_id)
        print(response)

        if response['success']:
            await bot.send_message(admin_id,
                                   text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ remonline!")
            await bot.send_message(order['telegram_id'], "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î—è–∫—É—é—î–º–æ, —â–æ –æ–±–∏—Ä–∞—î—Ç–µ –Ω–∞—Å!")
        else:
            await bot.send_message(admin_id, text="–£–ø—Å. –í—ñ–¥–±—É–ª–∞—Å—å –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä—ñ—à–∫–∏ –ø—ñ–∑–Ω—ñ—à–µ")

    if "check_ttn/" in callback.data:
        ttn = await id_spliter(callback.data)
        order = await get_order_by_ttn(ttn)

        response = await ttn_tracking(ttn, order['phone'])
        tnn_info_text = await ttn_info_builder(response, order)
        await bot.send_message(callback.message.chat.id, text=tnn_info_text)

    if "change_order_prepayment/" in callback.data:
        order_id = callback.data.rsplit('/')[-1]

    if "delete_order/" in callback.data:
        order_id = await id_spliter(callback.data)
        order = await get_order_by_id(order_id)
        response = await delete_order(order_id)
        markup_i = types.InlineKeyboardMarkup()
        write_to_button = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É", url='t.me/fallenreds')
        markup_i.add(write_to_button)
        if response['success']:
            await bot.send_message(admin_id,
                                   text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –Ø–∫—â–æ —Ç–∏–ø –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ –∑ remonline!")
            await bot.send_message(order['telegram_id'],
                                   "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",reply_markup=markup_i)
        else:
            await bot.send_message(admin_id, text="–£–ø—Å. –í—ñ–¥–±—É–ª–∞—Å—å –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä—ñ—à–∫–∏ –ø—ñ–∑–Ω—ñ—à–µ")

    if callback.data == "no_paid":
        orders = await no_paid_along_time()
        print(orders)
        if not orders['success']:
            return await bot.send_message(admin_id, text="–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–µ—Å–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å, –∑ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç–æ—é")
        await order_list_builder(bot, orders['data'], admin_id, goods)

    if callback.data == "–ó–≤‚Äò—è–∑–æ–∫":
        await show_info(callback)

    if "add_ttn/" in callback.data:
        order_id = await id_spliter(callback.data)
        ttn_message = await bot.send_message(callback.message.chat.id,
                                             f"–î–æ–±—Ä–µ, —É–≤–µ–¥—ñ—Ç—å –∑–∞—Ä–∞–∑ id –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n<b>Id —Ü—å–æ–≥–æ "
                                             f"–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}.</b>")

        await NewTTN.order_id.set()

    if callback.data == "–°—Ç–∞—Ç—É—Å":
        await check_status(callback)

    if callback.data == "edit_discount":
        await edit_discount(callback.message.chat.id)

    if "delete_discount/" in callback.data:
        discount_id = await id_spliter(callback.data)
        response = await delete_discount(discount_id)
        if response['success']:
            await bot.send_message(callback.message.chat.id, text="–ó–Ω–∏–∂–∫—É –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            await bot.send_message(callback.message.chat.id,
                                   text="–£–ø—Å. –í—ñ–¥–±—É–ª–∞—Å—å –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä—ñ—à–∫–∏ –ø—ñ–∑–Ω—ñ—à–µ")




    if callback.data == "new_discount":
        await bot.send_message(callback.message.chat.id, text="–û—á—ñ–∫—É—é –Ω–æ–≤—ñ –¥–∞–Ω—ñ")


@dp.message_handler(content_types=['text'], state=NewTTN.order_id)
async def order_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['order_id'] = message.text

    await message.reply(
        "<b>–î—É–∂–µ –¥–æ–±—Ä–µ, –∑–∞—Ä–∞–∑ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä TTN. </b>\n\n–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¢TN –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    await NewTTN.next()


@dp.message_handler(content_types=['text'], state=NewTTN.ttn_state)
async def ttn_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['ttn_state'] = message.text

    data = await state.get_data()
    print(data)
    await state.finish()
    response = await update_ttn(data['order_id'], data['ttn_state'])
    print(response)

    if response['success']:
        return await message.reply("–ß—É–¥–æ–≤–æ, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ TTN –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    else:
        await message.reply("–£–ø—Å. –í—ñ–¥–±—É–ª–∞—Å—å –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä—ñ—à–∫–∏ –ø—ñ–∑–Ω—ñ—à–µ")


async def get_no_paid_orders():
    while True:
        print("Updating get_no_paid_orders")
        client_notification = """<b>–®–∞–Ω–æ–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç, —É –≤–∞—Å —î –Ω–µ—Å–ø–ª–∞—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.</b>\n–î–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ <b>–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω—å üì¶</b>.\n–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ <b>–ó–≤‚Äò—è–∑–æ–∫ –∑ –Ω–∞–º–∏ üìû</b> .
          """

        orders = await no_paid_along_time()
        if orders['success']:
            for order in orders['data']:
                markup_i_client = types.InlineKeyboardMarkup()
                write_to_button = types.InlineKeyboardButton("–ó–≤‚Äò—è–∑–æ–∫ –∑ –Ω–∞–º–∏ üìû", callback_data="–ó–≤‚Äò—è–∑–æ–∫")
                to_pay_button = types.InlineKeyboardButton("–°–ø–ª–∞—Ç–∏—Ç–∏ üí∏", callback_data="–°—Ç–∞—Ç—É—Å")
                markup_i_client.add(write_to_button, to_pay_button)

                telegram_id = order['telegram_id']
                client = await get_client_by_tg_id(telegram_id)
                await bot.send_message(telegram_id, text=client_notification, reply_markup=markup_i_client)
            not_paid_along_time_client = types.InlineKeyboardButton("–¢–∞–∫, –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–µ—Å–ø–ª–∞—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                                                    callback_data="no_paid")
            markup_i = types.InlineKeyboardMarkup()
            markup_i.add(not_paid_along_time_client)

            for admin in admin_list:
                await bot.send_message(admin, text=f"–ù–∞—Ä–∞–∑—ñ —î –Ω–µ—Å–ø–ª–∞—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ {len(orders['data'])}",
                                       reply_markup=markup_i)
        await asyncio.sleep(3600)


executor.start_polling(dp, skip_updates=True)
