import json
import asyncio
from api import get_all_goods, get_orders_by_tg_id
from aiogram import Bot, Dispatcher, executor, types, filters
# from DB import DBConnection
from config import *

# from RestAPI.RemonlineAPI import RemonlineAPI

# CRM = RemonlineAPI(REMONLINE_API_KEY_PROD)
# warehouse = CRM.get_main_warehouse_id()
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)






@dp.message_handler(commands=['start'])
async def start_message(message):
    greetings_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.first_name}. \n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ üõí, –∏–ª–∏ –∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ üì¶"

    markup_k = types.ReplyKeyboardMarkup(resize_keyboard=True)
    order_status_button = types.KeyboardButton("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ üì¶")
    markup_k.add(order_status_button)
    await bot.send_message(message.chat.id, text=greetings_text, reply_markup=markup_k)


async def make_order(message, data, goods, order):
    text = f'<b>–ò–º—è:</b> {order["name"]}\n<b>–§–∞–º–∏–ª–∏—è</b>: {order["last_name"]}\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order["nova_post_address"]} \n'
    if order["prepayment"]:
        text += f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞:</b> –ù—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ–ø–ª–∞—Ç–µ\n\n'
    else:
        text += f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞:</b> –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂\n\n'
    to_pay = 0

    for obj in data:
        good = find_good(goods, obj['good_id'])
        to_pay += good["price"][PRICE_ID_PROD] * obj['count']
        text += f"<b>–¢–æ–≤–∞—Ä:</b> {good['title']} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {obj['count']}\n\n"
    text += f"<b>–ö –æ–ø–ª–∞—Ç–µ {to_pay}üí≥</b>"
    await bot.send_message(message.chat.id, text=text)

    if order["prepayment"] and not order["is_paid"]:
        await bot.send_invoice(message.chat.id,
                               title="–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
                               description='–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –µ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç—å',
                               provider_token='5322214758:TEST:4eb03c3b-916d-436b-aba8-3b70b54c711e',
                               currency="uah",
                               is_flexible=False,
                               prices=[types.LabeledPrice(label='–ù–∞—Å—Ç–æ—è—â–∞—è –ú–∞—à–∏–Ω–∞ –í—Ä–µ–º–µ–Ω–∏', amount=int(to_pay) * 100)],
                               payload="test"

                               )


def find_good(goods, good_id):
    for good in goods:
        if good["id"] == good_id:
            return good

@dp.message_handler(filters.Text(contains="—Å—Ç–∞—Ç—É—Å", ignore_case=True))
async def check_status(message: types.Message):

    orders = await get_orders_by_tg_id(int(message.chat.id))
    if len(orders) == 0:
        return await message.reply(f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")

    goods = await get_all_goods()
    await message.reply(f"–£ –≤–∞—Å {len(orders)} –∑–∞–∫–∞–∑–æ–≤:")

    for order in orders:
        data = json.loads(order["goods_list"].replace("'", '"'))
        await make_order(message, data, goods["data"], order)


executor.start_polling(dp, skip_updates=True)
