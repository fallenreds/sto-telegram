import json
from aiogram import types

from api import get_orders_by_tg_id, get_client_by_tg_id, get_discount
from buttons import get_delete_order_button, get_props_info_button, get_send_payment_photo_button, get_check_ttn_button
from config import PRICE_ID_PROD


def find_good(goods, good_id):
    for good in goods:
        if good["id"] == good_id:
            return good

async def make_order(bot, telegram_id, data, goods, order, client):
    markup_i = types.InlineKeyboardMarkup(row_width=2)

    text = f"<b>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> {order['id']}\n<b>–Ü–º'—è:</b> {order['name']}\n<b>–ü—Ä—ñ–∑–≤–∏—â–µ</b>: {order['last_name']}\n<b>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['nova_post_address']} \n"
    if ttn := order['ttn']:
        text += f"<b>–ù–æ–º–µ—Ä –¢–¢–ù</b>: {ttn}\n"
        check_ttn_button = get_check_ttn_button(order['ttn'])
        markup_i.add(check_ttn_button)

    if order["prepayment"]:
        text += f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É:</b> –ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞\n'
        if order['is_paid'] == 1:
            text += f'<b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏:</b> –û–ø–ª–∞—á–µ–Ω–æ\n\n'
        else:
            text += f'<b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏:</b> –ü–æ—Ç—Ä–µ–±—É—î –æ–ø–ª–∞—Ç–∏\n\n'
    else:
        text += f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É:</b> –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂\n\n'
    to_pay = 0


    for obj in data:
        good = find_good(goods, obj['good_id'])
        to_pay += good["price"][PRICE_ID_PROD] * obj['count']
        text += f"<b>–¢–æ–≤–∞—Ä:</b> {good['title']} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {obj['count']}\n\n"

    discount = await get_discount(client['id'])
    if discount['success']:
        to_pay -= to_pay / 100 * discount['data']['procent']

    if not order['is_paid']:
        text += f"<b>–î–æ —Å–ø–ª–∞—Ç–∏ {to_pay}üí≥</b>"

    if order['prepayment'] == 1 and order['is_paid'] == 0:
        delete_button = get_delete_order_button(order['id'])
        markup_i.add(delete_button)

    if order["prepayment"] and not order["is_paid"]:
        props: dict
        with open('props.json', "r", encoding='utf-8') as f:
            props = json.load(f)
        text += "\n\n–î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏üëá</b>" \
                "\n–ü—ñ—Å–ª—è —Å–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –∑ –æ–ø–ª–∞—Ç–æ—é</b>"
        markup_i.add(get_props_info_button())
        markup_i.add(get_send_payment_photo_button(order['id']))
    await bot.send_message(telegram_id, text=text, reply_markup=markup_i)

async def base_client_info_builder(client):
    print(client)
    base_client_name = f"{client['name']} {client['last_name']}"
    base_client_phone = f"{client['phone']}"
    return f"<b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ remonline:</b>\n–§–ò–û:{base_client_name}\n–¢–µ–ª–µ—Ñ–æ–Ω:{base_client_phone}\n\n"


async def build_order_suma(order: dict, goods: dict):
    goods_list = json.loads(order["goods_list"].replace("'", '"'))
    suma = 0
    for selected_good in goods_list:
        good = find_good(goods['data'], selected_good['good_id'])
        suma += good['price'][PRICE_ID_PROD] * selected_good['count']
    return suma

async def manager_notes_builder(order, goods) -> dict:
    base_client = await get_client_by_tg_id(order['telegram_id'])
    base_client_info = await base_client_info_builder(base_client)

    name = f"{order['name']} {order['last_name']}"
    phone = f"{order['phone']}"
    address = f"{order['nova_post_address']}"
    prepayment = "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞" if order["prepayment"] == True else "–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂"
    goods_list = json.loads(order["goods_list"].replace("'", '"'))

    order_suma = await build_order_suma(order, goods)
    user_discount = await get_discount(base_client["id"])

    print(order_suma)
    print(user_discount)
    procent = 0

    if user_discount['success']:
        procent = user_discount['data']['procent']
    to_pay = order_suma - order_suma / 100 * procent

    is_paid = "–ù–µ–º–∞ –¥–∞–Ω–∏—Ö"
    if order['is_paid'] == 1:
        is_paid = f'–û–ø–ª–∞—á–µ–Ω–æ'
    else:
        is_paid = f'–ü–æ—Ç—Ä–µ–±—É—î –æ–ø–ª–∞—Ç–∏'

    goods_info = f"{base_client_info}<b>–î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n" \
                 f"–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order['id']} \n" \
                 f"–§–Ü–û: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n" \
                 f"–ê–¥—Ä–µ—Å–∞: {address}\n" \
                 f"–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É: {prepayment}\n" \
                 f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:{is_paid}\n\n" \
                 f"–ó–Ω–∏–∂–∫–∞: {procent}%\n" \
                 f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Å—É–º–∞: {order_suma} –≥—Ä–Ω\n"\
                 f"<b>–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {to_pay} –≥—Ä–Ω</b>"


    if ttn := order['ttn']:
        goods_info += f"\n–ù–æ–º–µ—Ä –¢–¢–ù: {ttn}"

    for obj in goods_list:
        good = find_good(goods["data"], obj['good_id'])
        goods_info += f"\n\n–¢–æ–≤–∞—Ä: {good['title']} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {obj['count']}"

    return {"text": goods_info, "client": base_client}


async def id_spliter(callback_data: str) -> int:
    """
    :param callback_data: delete_order/45
    :return: 45
    """

    return int(callback_data.rsplit('/')[-1])

async def ttn_info_builder(response: dict, order):
    text = ''
    if response["success"]:
        data = response['data'][0]
        text = f"<b>üìÆ–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É –∑–∞ –Ω–æ–º–µ—Ä–æ–º: {data['Number']}</b>\n\n"
        print(response)
        text += f"<b>C—Ç–∞—Ç—É—Å: </b> {data['Status']}\n"
        text += f"<b>–§–∞–∫—Ç–∏—á–Ω–∞ –≤–∞–≥–∞: </b> {data['FactualWeight']}\n"

        if not data['RecipientFullName']:
            text += f"<b>–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: </b> {order['last_name']} {order['name']}\n"
        else:
            text += f"<b>–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: </b> {data['RecipientFullName']}\n"

        if not data['RecipientFullName']:
            text += f"<b>–ü–Ü–ë –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: </b> –ì–µ–∫–∞–ª–æ –î–º–∏—Ç—Ä–æ\n"
        else:

            text += f"<b>–ü–Ü–ë –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: </b> {data['SenderFullNameEW']}\n"
        text += f"<b>–ê–¥—Ä–µ—Å–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: </b> {data['CityRecipient']}, {data['WarehouseRecipient']}\n"
        text += f"<b>–ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: </b> {data['CitySender']}, {data['WarehouseSender']}\n"
        text += f"<b>–û—á—ñ–∫—É–≤–∞–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: </b> {data['ScheduledDeliveryDate']}\n\n"
        if not data['RecipientDateTime']:
            text += f"<b>–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: </b> –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö\n"
        else:
            text += f"<b>–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: </b> {data['RecipientDateTime']}\n"
        text += f"<b>–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: </b> {data['DocumentCost']}\n"
        text += f"<b>–û–≥–æ–ª–æ—à–µ–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: </b> {data['AnnouncedPrice']}\n"
        if data['PaymentMethod'] == 'Cash':
            text += f"<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É: </b> –ø–µ—Ä–µ–¥–ø–ª–∞—Ç–∞\n"
        else:
            text += f"<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É: </b> –ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂\n"
        text += f"<b>–°—É–º–∞ –æ–ø–ª–∞—Ç–∏ –ø–æ –ï–ù: </b> {data['ExpressWaybillAmountToPay']}\n"
        if data['ExpressWaybillPaymentStatus'] == "Payed":
            text += f"<b>–°—Ç–∞—Ç—É—Å –ø–æ –ï–ù: </b> –°–ø–ª–∞—á–µ–Ω–æ\n"
        else:
            text += f"<b>–°—Ç–∞—Ç—É—Å –ø–æ –ï–ù: </b> –ü–æ—Ç—Ä–µ–±—É—î –æ–ø–ª–∞—Ç–∏\n"
        return text
    return "–ü–û–ú–ò–õ–ö–ê"


async def send_messages_to_admins(bot, admin_ids: list, text, reply_markup=None):
    for admin in admin_ids:
        await bot.send_message(admin, text=text, reply_markup=reply_markup)


async def send_error_log(bot, admin_id, error):
    await bot.send_message(admin_id, text=error)