import json

from api import get_orders_by_tg_id, get_client_by_tg_id


def find_good(goods, good_id):
    for good in goods:
        if good["id"] == good_id:
            return good


async def base_client_info_builder(client):
    print(client)
    base_client_name = f"{client['name']} {client['last_name']}"
    base_client_phone = f"{client['phone']}"
    return f"<b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ remonline:</b>\n–§–ò–û:{base_client_name}\n–¢–µ–ª–µ—Ñ–æ–Ω:{base_client_phone}\n\n"


async def manager_notes_builder(order, goods) -> dict:
    base_client = await get_client_by_tg_id(order['telegram_id'])
    base_client_info = await base_client_info_builder(base_client)

    name = f"{order['name']} {order['last_name']}"
    phone = f"{order['phone']}"
    address = f"{order['nova_post_address']}"
    prepayment = "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞" if order["prepayment"] == True else "–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂"
    goods_list = json.loads(order["goods_list"].replace("'", '"'))

    is_paid = "–ù–µ–º–∞ –¥–∞–Ω–∏—Ö"
    if order["prepayment"]:
        if order["is_paid"]:
            is_paid = "–°–ø–ª–∞—á–µ–Ω–æ"
        is_paid = "–ù–µ —Å–ø–ª–∞—á–µ–Ω–æ"

    goods_info = f"{base_client_info}<b>–î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n–§–Ü–û: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ê–¥—Ä–µ—Å–∞: {address}\n–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É: {prepayment}\n–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:{is_paid}"

    if ttn := order['ttn']:
        goods_info += f"\n–ù–æ–º–µ—Ä –¢–¢–ù: {ttn}"

    for obj in goods_list:
        good = find_good(goods["data"], obj['good_id'])
        goods_info += f"\n\n–¢–æ–≤–∞—Ä: {good['title']} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {obj['count']}"

    return {"text": goods_info, "client": base_client}


async def id_spliter(callback_data: str) -> int:
    """
    :param callback_data: delete_order/45
    :return: 45
    """

    return int(callback_data.rsplit('/')[-1])

async def ttn_info_builder(response: dict, order):
    text = ''
    if response["success"]:
        data = response['data'][0]
        text = f"<b>üìÆ–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É –∑–∞ –Ω–æ–º–µ—Ä–æ–º: {data['Number']}</b>\n\n"
        print(response)
        text += f"<b>C—Ç–∞—Ç—É—Å: </b> {data['Status']}\n"
        text += f"<b>–§–∞–∫—Ç–∏—á–Ω–∞ –≤–∞–≥–∞: </b> {data['FactualWeight']}\n"

        if not data['RecipientFullName']:
            text += f"<b>–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: </b> {order['last_name']} {order['name']}\n"
        else:
            text += f"<b>–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: </b> {data['RecipientFullName']}\n"

        text += f"<b>–ü–Ü–ë –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: </b> {data['SenderFullNameEW']}\n"
        text += f"<b>–ê–¥—Ä–µ—Å–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: </b> {data['CityRecipient']}, {data['WarehouseRecipient']}\n"
        text += f"<b>–ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: </b> {data['CitySender']}, {data['WarehouseSender']}\n"
        text += f"<b>–û—á—ñ–∫—É–≤–∞–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: </b> {data['ScheduledDeliveryDate']}\n\n"
        if not data['RecipientDateTime']:
            text += f"<b>–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: </b> –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö\n"
        else:
            text += f"<b>–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: </b> {data['RecipientDateTime']}\n"
        text += f"<b>–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: </b> {data['DocumentCost']}\n"
        text += f"<b>–û–≥–æ–ª–æ—à–µ–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: </b> {data['AnnouncedPrice']}\n"
        if data['PaymentMethod'] == 'Cash':
            text += f"<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É: </b> –ø–µ—Ä–µ–¥–ø–ª–∞—Ç–∞\n"
        else:
            text += f"<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É: </b> –ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂\n"
        text += f"<b>–°—É–º–∞ –æ–ø–ª–∞—Ç–∏ –ø–æ –ï–ù: </b> {data['ExpressWaybillAmountToPay']}\n"
        if data['ExpressWaybillPaymentStatus'] == "Payed":
            text += f"<b>–°—Ç–∞—Ç—É—Å –ø–æ –ï–ù: </b> –°–ø–ª–∞—á–µ–Ω–æ\n"
        else:
            text += f"<b>–°—Ç–∞—Ç—É—Å –ø–æ –ï–ù: </b> –ü–æ—Ç—Ä–µ–±—É—î –æ–ø–ª–∞—Ç–∏\n"
        return text
    return "–ü–û–ú–ò–õ–ö–ê"
